import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging
import os
from dotenv import load_dotenv
from database import (
    create_table,
    add_user_if_not_exists,
    update_user_subscription,
    update_user_city,
    update_user_price,
    get_user_city,
    get_user_subscription,
    get_listings_by_city_or_region_and_price,
    get_user_region,
    update_user_region
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")
bot = Bot(token=API_TOKEN)

dp = Dispatcher()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
finish_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="Standart"), KeyboardButton(text="üòé PREMIUM")]],
    resize_keyboard=True
)

start_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É!"), KeyboardButton(text="–¢–∞—Ä–∏—Ñ—ã!")]],
    resize_keyboard=True
)

premium_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="1 –º–µ—Å—è—Ü - 200—Ä", callback_data="premium_1_month"),
            InlineKeyboardButton(text="3 –º–µ—Å—è—Ü–∞ - 499—Ä", callback_data="premium_3_months"),
        ],
        [InlineKeyboardButton(text="1 –≥–æ–¥ - 2200—Ä", callback_data="premium_1_year")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_subscription")],
    ]
)

class UserStates(StatesGroup):
    waiting_for_city_or_region = State()
    waiting_for_price = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(Command(commands=["start"]))
async def start_command(message: types.Message):
    add_user_if_not_exists(message.from_user.id)
    await message.answer("–†–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å! \n–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω!", reply_markup=start_keyboard)

@dp.message(F.text.in_(["Standart", "üòé PREMIUM"]))
async def subscription_choice(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    selected_subscription = "Standart" if message.text == "Standart" else "Premium"
    update_user_subscription(user_id, selected_subscription)

    if selected_subscription == "Standart":
        await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É Standart. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω.", reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(UserStates.waiting_for_city_or_region)
    else:  # –≠—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –±–ª–æ–∫ else
        await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É Premium. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=premium_keyboard)


@dp.callback_query(lambda call: call.data.startswith("premium"))
async def handle_premium_tariff(call: types.CallbackQuery, state: FSMContext):
    tariffs = {
        "premium_1_month": "1 –º–µ—Å—è—Ü - 200—Ä",
        "premium_3_months": "3 –º–µ—Å—è—Ü–∞ - 499—Ä",
        "premium_1_year": "1 –≥–æ–¥ - 2200—Ä",
    }

    tariff = call.data  # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–∞—Ä–∏—Ñ–∞ –∏–∑ callback_data
    selected_tariff = tariffs.get(tariff)  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è

    if selected_tariff:
        await call.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ {selected_tariff}. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥.")
        await state.set_state(UserStates.waiting_for_city_or_region)
    else:
        await call.message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∑–∞–Ω–æ–≤–æ.")

@dp.message(lambda message: message.text == "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É!")
async def choose_subscription_command(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:", reply_markup=finish_keyboard)

@dp.message(UserStates.waiting_for_city_or_region)
async def city_input(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    city_or_region = message.text
    update_user_city(user_id, city_or_region)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000-5000):")
    await state.set_state(UserStates.waiting_for_price)
@dp.message(UserStates.waiting_for_price)
async def price_input(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω
        min_price, max_price = map(int, message.text.split('-'))
        city = get_user_city(user_id)  # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –∏–∑ –ë–î
        region = get_user_region(user_id)  # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–≥–∏–æ–Ω –∏–∑ –ë–î

        if not city and not region:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω.")
            return

        # –ò—â–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ –≥–æ—Ä–æ–¥—É –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω—É
        listings = get_listings_by_city_or_region_and_price(city, region, min_price, max_price)

        if listings:
            await message.answer(f"–í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ —Ü–µ–Ω–µ –æ—Ç {min_price} –¥–æ {max_price} —Ä—É–±.")
            for description, price, contact, photo in listings:
                # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                await message.answer(
                    f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                    f"üíµ –¶–µ–Ω–∞: {price} —Ä—É–±.\n"
                    f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {contact}"
                )
        else:
            await message.answer(f"–ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É —Ü–µ–Ω –≤ {city if city else region}.")
    finally:
        await state.clear()

@dp.message(F.text == "–¢–∞—Ä–∏—Ñ—ã!")
async def tariffs_command(message: types.Message):
    await message.answer(
        "üóì –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã:\n"
        "Standart ‚Äì –ø–æ–∏—Å–∫ –ø–æ —Ä–µ–≥–∏–æ–Ω—É.\n"
        "PREMIUM ‚Äì –ø–æ–∏—Å–∫ –ø–æ –≥–æ—Ä–æ–¥—É.\n"
        "üìä –¶–µ–Ω—ã:\n"
        "‚úÖ 1 –º–µ—Å—è—Ü - 200—Ä\n"
        "‚úÖ 3 –º–µ—Å—è—Ü–∞ - 499—Ä\n"
        "‚úÖ 1 –≥–æ–¥ - 2200—Ä"
    )

async def main():
    create_table()
    await bot.delete_webhook(drop_pending_updates=True)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
