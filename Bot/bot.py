import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import logging
import os
import sqlite3
from dotenv import load_dotenv
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database import (
    create_table,
    add_user_if_not_exists,
    get_user_subscription,
    update_user_subscription,
    update_user_city,
    update_user_price
)

load_dotenv()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ç–æ–∫–µ–Ω
API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")
bot = Bot(token=API_TOKEN)

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dp = Dispatcher()



# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏
finish_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="Standart"), KeyboardButton(text="üòé PREMIUM")]
    ],
    resize_keyboard=True
)

# –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç
start_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É!"), KeyboardButton(text="–¢–∞—Ä–∏—Ñ—ã!")]
    ],
    resize_keyboard=True
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command(commands=["start"]))
async def start_command(message: types.Message):
    add_user_if_not_exists(message.from_user.id)
    await message.answer(
        "–†–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å! \n–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω!",
        reply_markup=start_keyboard
    )

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏ –¥–ª—è –ø—Ä–µ–º–∏–∫–º
premium_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="1 –º–µ—Å—è—Ü - 200—Ä", callback_data="premium_1_month"),
            InlineKeyboardButton(text="3 –º–µ—Å—è—Ü–∞ - 499—Ä", callback_data="premium_3_months"),
        ],
        [
            InlineKeyboardButton(text="1 –≥–æ–¥ - 2200—Ä", callback_data="premium_1_year"),
        ],
        [
            InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_subscription"),
        ],
    ]
)

class UserStates(StatesGroup):
    waiting_for_city_or_region = State()
    waiting_for_price = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.message(F.text.in_(["Standart", "üòé PREMIUM"]))
async def subscription_choice(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    selected_subscription = "Standart" if message.text == "Standart" else "Premium"

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    update_user_subscription(user_id, selected_subscription)

    if selected_subscription == "Standart":
        await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É Standart. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω.", reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(UserStates.waiting_for_city_or_region)
    elif selected_subscription == "Premium":
        await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É Premium. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=premium_keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ PREMIUM
@dp.callback_query(lambda call: call.data.startswith("premium"))
async def handle_premium_tariff(call: types.CallbackQuery, state: FSMContext):
    if call.data == "premium_1_month":
        await call.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ 1 –º–µ—Å—è—Ü - 200—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥.")
    elif call.data == "premium_3_months":
        await call.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ 3 –º–µ—Å—è—Ü–∞ - 499—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥.")
    elif call.data == "premium_1_year":
        await call.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ 1 –≥–æ–¥ - 2200—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥.")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
    await state.set_state(UserStates.waiting_for_city_or_region)


# –ö–æ–º–∞–Ω–¥–∞ —Å–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
@dp.message(F.text == "–î–∞, —Å–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def confirm_subscription_change(message: types.Message):
    user_id = message.from_user.id
    current_subscription = get_user_subscription(user_id)
    
    # –ú–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é
    new_subscription = "Premium" if current_subscription == "Standart" else "Standart"
    update_user_subscription(user_id, new_subscription)

    await message.answer(
        f"–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_subscription}!",
        reply_markup=finish_keyboard
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É!"
@dp.message(lambda message: message.text == "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É!")
async def choose_subscription_command(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:",
        reply_markup=finish_keyboard
    )

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
@dp.message(UserStates.waiting_for_city_or_region)
async def city_input(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    location = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –≤ –±–∞–∑—É
    update_user_city(user_id, location)

    await message.answer(f"–í–∞—à –≥–æ—Ä–æ–¥: {location}. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –∞—Ä–µ–Ω–¥—ã!")
    await state.set_state(UserStates.waiting_for_price)
# –û–∂–∏–¥–∞–Ω–∏–µ —Ü–µ–Ω—ã
@dp.message(UserStates.waiting_for_price)
async def price_input(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    price = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É –≤ –±–∞–∑—É
    update_user_price(user_id, price)

    await message.answer(f"–£–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: {price}. –ü–æ–¥–±–∏—Ä–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã!")
    await state.clear()
@dp.message(F.text == "–¢–∞—Ä–∏—Ñ—ã!")
async def tariffs_command(message: types.Message):
    await message.answer(
        "üóì –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã: Standart- –ø–æ–∏—Å–∫ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —É–¥–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–∫–≥–∏–æ–Ω–∞. PREMIUM ‚Äì –ø–æ–∏—Å–∫ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞\n"
        "üìä –¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏:\n"
        "‚úÖ 1 –º–µ—Å—è—Ü - 200—Ä\n"
        "‚úÖ 3 –º–µ—Å—è—Ü–∞ - 499—Ä\n"
        "‚úÖ 1 –≥–æ–¥ - 2200—Ä\n"
    )


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    create_table()
    await bot.delete_webhook(drop_pending_updates=True)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())