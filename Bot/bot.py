import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
import logging
import datetime
from dotenv import load_dotenv
import os
import sqlite3

load_dotenv()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ç–æ–∫–µ–Ω
API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")
bot = Bot(token=API_TOKEN)

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dp = Dispatcher()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ë–î
def create_table():
    connection = sqlite3.connect("database.db")
    cursor = connection.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        subscription TEXT NOT NULL,
        phone TEXT NOT NULL
    )
    """)
    connection.commit()
    connection.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_user(name, subscription, phone):
    connection = sqlite3.connect("database.db")
    cursor = connection.cursor()
    cursor.execute("INSERT INTO users (name, subscription, phone) VALUES (?, ?, ?)", (name, subscription, phone))
    connection.commit()
    connection.close()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
def phone_request_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    button = KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
    keyboard.add(button)
    return keyboard

# –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç
start_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É!")]
    ],
    resize_keyboard=True
)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
finish_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="Standart"), KeyboardButton(text="üòé PREMIUM")]
    ],
    resize_keyboard=True
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command(commands=["start"]))
async def start_command(message: types.Message):
    await message.answer(
        "–†–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å! \n–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω!",
        reply_markup=start_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ Standart
@dp.message(F.text == "Standart")
async def standart_subscription(message: types.Message):
    await message.answer(
        "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É Standart! –í–∞—à —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ–≥—Ä–∞–Ω–∏—á–µ–Ω."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ PREMIUM
@dp.message(F.text == "üòé PREMIUM")
async def premium_subscription(message: types.Message):
    await message.answer(
        "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É PREMIUM. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à—É –∫–æ–º–∞–Ω–¥—É!"
    )

# –ü—Ä–æ—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É"
@dp.message(lambda message: message.text == "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É!")
async def command(message: types.Message):
    await message.answer(
        "–ï—Å—Ç—å –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏. Standart - –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞. Premium - —Ü–µ–Ω–∞ 220—Ä., –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≥–æ—Ä–æ–¥–∞!",
        reply_markup=finish_keyboard
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞
    create_table()

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤–µ–±—Ö—É–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
    await bot.delete_webhook(drop_pending_updates=True)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
#