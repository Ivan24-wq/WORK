import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging
import os
from dotenv import load_dotenv
from database import (
    create_table,
    add_user_if_not_exists,
    update_user_subscription,
    update_user_city,
    get_user_city,
    get_user_region,
    get_user_subscription_info,
    update_user_region,
    get_listings_by_city_or_region_and_price
)
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")
bot = Bot(token=API_TOKEN)

dp = Dispatcher()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
finish_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="Standart"), KeyboardButton(text="üòé PREMIUM")]],
    resize_keyboard=True
)

start_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É!"), KeyboardButton(text="–¢–∞—Ä–∏—Ñ—ã!")]],
    resize_keyboard=True
)

premium_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="1 –º–µ—Å—è—Ü - 200—Ä", callback_data="premium_1_month"),
         InlineKeyboardButton(text="3 –º–µ—Å—è—Ü–∞ - 499—Ä", callback_data="premium_3_months")],
        [InlineKeyboardButton(text="1 –≥–æ–¥ - 2200—Ä", callback_data="premium_1_year")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_subscription")]
    ]
)

# –í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞
restart_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üîÑ –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥")], [KeyboardButton(text="üîÑ –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π —Ä–µ–≥–∏–æ–Ω")]],
    resize_keyboard=True
)


class UserStates(StatesGroup):
    waiting_for_city_or_region = State()
    waiting_for_price = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(Command(commands=["start"]))
async def start_command(message: types.Message):
    add_user_if_not_exists(message.from_user.id)
    await message.answer("–†–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å! \n–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω!", reply_markup=start_keyboard)


@dp.message(F.text.in_(["Standart", "üòé PREMIUM"]))
async def subscription_choice(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    selected_subscription = "Standart" if message.text == "Standart" else "Premium"

    if selected_subscription == "Standart":
        update_user_subscription(user_id, selected_subscription, 0)  # Standart –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∏–º–µ–µ—Ç —Å—Ä–æ–∫–∞
        await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É Standart. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω.", reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚úÖ –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ PREMIUM")]],
            resize_keyboard=True
        ))
        await state.set_state(UserStates.waiting_for_city_or_region)
    else:
        await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É Premium. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=premium_keyboard)


@dp.callback_query(lambda call: call.data.startswith("premium"))
async def handle_premium_tariff(call: types.CallbackQuery, state: FSMContext):
    tariffs = {
        "premium_1_month": (200, 30),
        "premium_3_months": (499, 90),
        "premium_1_year": (2200, 365),
    }

    selected_tariff = tariffs.get(call.data)
    if selected_tariff:
        price, duration = selected_tariff
        update_user_subscription(call.from_user.id, "PREMIUM", duration)

        subscription_type, end_date = get_user_subscription_info(call.from_user.id)
        if end_date and isinstance(end_date, str):
            end_date = datetime.strptime(end_date, "%Y-%m-%d")
        end_date_formatted = end_date.strftime("%d.%m.%Y") if end_date else "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"

        await call.message.answer(
            f"–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: {subscription_type}\n"
            f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date_formatted}\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price} —Ä—É–±.\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä!"
        )
        await call.message.answer("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ–∏—Å–∫–∞:")
        await state.set_state(UserStates.waiting_for_city_or_region)
    else:
        await call.message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∑–∞–Ω–æ–≤–æ.")


@dp.message(lambda message: message.text == "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É!")
async def choose_subscription_command(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:", reply_markup=finish_keyboard)


@dp.message(lambda message: message.text == "‚úÖ –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ PREMIUM")
async def transition_to_premium(message: types.Message):
    await message.answer("–í—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É PREMIUM! –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω", reply_markup=premium_keyboard)


@dp.message(UserStates.waiting_for_city_or_region)
async def city_input(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    city_or_region = message.text
    update_user_city(user_id, city_or_region)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000-5000):")
    await state.set_state(UserStates.waiting_for_price)



@dp.message(F.text == "üîÑ –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥")
async def restart_city_input(message: types.Message, state: FSMContext):
    # –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
    await state.set_state(UserStates.waiting_for_city_or_region)

@dp.message(F.text == "üîÑ –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π —Ä–µ–≥–∏–æ–Ω")
async def restart_city_input(message: types.Message, state: FSMContext):
    # –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
    await state.set_state(UserStates.waiting_for_city_or_region)

@dp.message(UserStates.waiting_for_city_or_region)
async def city_input(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    city_or_region = message.text

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    update_user_city(user_id, city_or_region)

    # –ó–∞–ø—Ä–æ—Å –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000-5000):")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ü–µ–Ω
    await state.set_state(UserStates.waiting_for_price)

@dp.message(UserStates.waiting_for_price)
async def price_input(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω
        min_price, max_price = map(int, message.text.split('-'))

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        city = get_user_city(user_id)
        region = get_user_region(user_id)

        print(f"–ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: –≥–æ—Ä–æ–¥={city}, —Ä–µ–≥–∏–æ–Ω={region}, —Ü–µ–Ω—ã –æ—Ç {min_price} –¥–æ {max_price}")

        # –ü–æ–∏—Å–∫ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
        listings = get_listings_by_city_or_region_and_price(city, region, min_price, max_price)

        print(f"–ù–∞–π–¥–µ–Ω–æ {len(listings)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥

        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        if listings:
            await message.answer(f"–í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ —Ü–µ–Ω–µ –æ—Ç {min_price} –¥–æ {max_price} —Ä—É–±.")
            for description, price, contact, photo in listings:
                await message.answer(
                    f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                    f"üíµ –¶–µ–Ω–∞: {price} —Ä—É–±.\n"
                    f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {contact}"
                )
        else:
            await message.answer(f"–ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É —Ü–µ–Ω –≤ {city if city else region}.")
    except ValueError:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ü–µ–Ω
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ '1000-5000'.")
    finally:
        # –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
        await message.answer("–•–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥?", reply_markup=restart_keyboard)
        await state.clear()


@dp.message(F.text == "–¢–∞—Ä–∏—Ñ—ã!")
async def tariffs_command(message: types.Message):
    await message.answer(
        "üóì –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã:\n"
        "Standart ‚Äì –ø–æ–∏—Å–∫ –ø–æ —Ä–µ–≥–∏–æ–Ω—É.\n"
        "PREMIUM ‚Äì –ø–æ–∏—Å–∫ –ø–æ –≥–æ—Ä–æ–¥—É.\n"
        "üìä –¶–µ–Ω—ã:\n"
        "‚úÖ 1 –º–µ—Å—è—Ü - 200—Ä\n"
        "‚úÖ 3 –º–µ—Å—è—Ü–∞ - 499—Ä\n"
        "‚úÖ 1 –≥–æ–¥ - 2200—Ä"
    )


async def main():
    create_table()
    await bot.delete_webhook(drop_pending_updates=True)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
