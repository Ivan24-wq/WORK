import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import logging
import os
import sqlite3
from dotenv import load_dotenv

load_dotenv()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ç–æ–∫–µ–Ω
API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")
bot = Bot(token=API_TOKEN)

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dp = Dispatcher()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ë–î
def create_table():
    connection = sqlite3.connect("database.db")
    cursor = connection.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        telegram_id INTEGER UNIQUE NOT NULL,
        subscription TEXT DEFAULT NULL
    )
    """)
    connection.commit()
    connection.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
def add_user_if_not_exists(telegram_id):
    connection = sqlite3.connect("database.db")
    cursor = connection.cursor()
    cursor.execute("INSERT OR IGNORE INTO users (telegram_id) VALUES (?)", (telegram_id,))
    connection.commit()
    connection.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_subscription(telegram_id):
    connection = sqlite3.connect("database.db")
    cursor = connection.cursor()
    cursor.execute("SELECT subscription FROM users WHERE telegram_id = ?", (telegram_id,))
    result = cursor.fetchone()
    connection.close()
    return result[0] if result else None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_user_subscription(telegram_id, subscription):
    connection = sqlite3.connect("database.db")
    cursor = connection.cursor()
    cursor.execute("UPDATE users SET subscription = ? WHERE telegram_id = ?", (subscription, telegram_id))
    connection.commit()
    connection.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
def update_user_city(telegram_id, city):
    connection = sqlite3.connect("database.db")
    cursor = connection.cursor()
    cursor.execute("UPDATE users SET subscription = ? WHERE telegram_id = ?",(city, telegram_id))
    connection.commit()
    connection.close()

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã –∞—Ä–µ–Ω–¥—ã
def update_user_price(telegram_id, price):
    connection = sqlite3.connect("database.db")
    cursor = connection.cursor()
    cursor.execute("UPDATE ysers SET subscription = ? WHERE telegram_id = ?",(price, telegram_id))
    connection.commit()
    connection.cursor()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏
finish_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="Standart"), KeyboardButton(text="üòé PREMIUM")]
    ],
    resize_keyboard=True
)

# –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç
start_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É!"), KeyboardButton(text="–¢–∞—Ä–∏—Ñ—ã!")]
    ],
    resize_keyboard=True
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command(commands=["start"]))
async def start_command(message: types.Message):
    add_user_if_not_exists(message.from_user.id)
    await message.answer(
        "–†–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å! \n–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω!",
        reply_markup=start_keyboard
    )

class UserStates(StatesGroup):
    waiting_for_city = State()
    waiting_for_price = State()
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.message(F.text.in_(["Standart", "üòé PREMIUM"]))
async def subscription_choice(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    current_subscription = get_user_subscription(user_id)
    selected_subscription = "Standart" if message.text == "Standart" else "Premium"
    
    if current_subscription is None:
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–Ω–∞
        update_user_subscription(user_id, selected_subscription)
        await message.answer(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É {selected_subscription}! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤—ã–±–æ—Ä."
        )
        await message.answer(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É {selected_subscription}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥!"
        
        )
        await state.set_state(UserStates.waiting_for_city)
    elif current_subscription == selected_subscription:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç —Ç—É –∂–µ –ø–æ–¥–ø–∏—Å–∫—É
        await message.answer(
            f"–£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ {current_subscription}."
        )
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –ø–æ–¥–ø–∏—Å–∫—É
        await message.answer(
            f"–£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ {current_subscription}. –•–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å –µ—ë –Ω–∞ {selected_subscription}?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="–î–∞, —Å–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"), KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
                ],
                resize_keyboard=True
            )
        )

        # –°–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏

@dp.message(F.text == "–î–∞, —Å–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def confirm_subscription_change(message: types.Message):
    user_id = message.from_user.id
    selected_supscription = "üòé PREMIUM" if get_user_subscription(user_id) == "Standart" else "Standart"
    update_user_subscription(user_id, selected_supscription)
    await message.answer(
        f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—Å! –í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É {selected_supscription}"
    )


    # –û—Ç–º–µ–Ω–∞ —Å–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
@dp.message(F.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_subscription_change(message: types.Message):
    await message.answer(
        f"–°–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞!", reply_markup=finish_keyboard
    )

    #–ö–æ–º–∞–Ω–¥–∞ –≥–æ—Ä–æ–¥
@dp.message(UserStates.waiting_for_city)
async def city_input(message: types.Message):
    user_id = message.from_user.id
    city = message.text
    update_user_city(user_id, city)
    await message.answer(f"–í–∞—à –≥–æ—Ä–æ–¥ {city} –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –∞—Ä–µ–Ω–¥—ã")


# –ö–æ–º–∞–Ω–¥–∞ —Ü–µ–Ω–∞
@dp.message(UserStates.waiting_for_price)
async def price_input(message: types.Message):
    user_id = message.from_user.id
    price = message.text
    update_user_price(user_id, price)
    await message.answer(f"–£–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ {price}")

#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Ç–∞—Ä–∏—Ñ—ã
@dp.message(lambda message: message.text == "–¢–∞—Ä–∏—Ñ—ã!")
async def command(message: types.Message):
    await message.answer(
        "üóì –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω:\n"
        "üìä–¶–µ–Ω–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É:\n"
        "‚úÖ1 –º–µ—Å—è—Ü - 200—Ä\n"
        "‚úÖ3 –º–µ—Å—è—Ü–∞ ‚Äì 499—Ä\n"
        "‚úÖ1 –≥–æ–¥ ‚Äì 2200—Ä/n"
    )
    


@dp.message(lambda message: message.text == "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É!")
async def command(message: types.Message):
    await message.answer(
        "–ï—Å—Ç—å –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏. Standart - –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞. Premium - —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –ø–ª–∞—Ç–Ω–æ., –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≥–æ—Ä–æ–¥–∞!",
        reply_markup=finish_keyboard
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞
    create_table()

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤–µ–±—Ö—É–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
    await bot.delete_webhook(drop_pending_updates=True)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())